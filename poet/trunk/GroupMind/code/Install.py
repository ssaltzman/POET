#!/usr/bin/python

####################################################################################
#                                                                                  #
# Copyright (c) 2003 Dr. Conan C. Albrecht                                         #
#                                                                                  #
# This file is part of GroupMind.                                                  #
#                                                                                  #
# GroupMind is free software; you can redistribute it and/or modify                #
# it under the terms of the GNU General Public License as published by             #
# the Free Software Foundation; either version 2 of the License, or                # 
# (at your option) any later version.                                              #
#                                                                                  #
# GroupMind is distributed in the hope that it will be useful,                     #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                   #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                    #
# GNU General Public License for more details.                                     #
#                                                                                  #
# You should have received a copy of the GNU General Public License                #
# along with Foobar; if not, write to the Free Software                            #
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA        #
#                                                                                  #
####################################################################################

import Constants
import os
import os.path
import sys
import threading
import time
import whichdb

# Ensure we have a superuser name and password
if len(sys.argv) < 3:
  print "Usage: python Install.py <super_username> <super_password>"
  sys.exit(0)

# Ensure the user wants to do this
print 'You are about to delete _everything_ in', Constants.DATA_DIRECTORY
print 'This only needs to be done *once*.  It will ERASE all data!'
print 'Continue? (yes/no) ',
answer = raw_input()
if answer.lower() != 'yes':
  print "Cancelled."
  sys.exit(0)
answer2 = raw_input('Erase all data and reinstall the tables--are you sure? (yes/no) ')
if answer2.lower() != 'yes':
  print "Cancelled."
  sys.exit(0)
print

# delete everything in the data directory
if not os.path.exists(Constants.DATA_DIRECTORY):
  os.makedirs(Constants.DATA_DIRECTORY)
for file in os.listdir(Constants.DATA_DIRECTORY):
  fullfile = os.path.join(Constants.DATA_DIRECTORY, file)
  if file[:1] != '.': # ignore .svn or other hidden directories
    os.remove(fullfile)

# we have to import datagate after we've created the data directory
import datagate

# create the master root item
print 'Creating the root item'
rootitem = datagate.create_item()
rootitem.id = 'z' # these three letter will be used for its shelf filename (short for root)
# since we changed the id (something not normally done), we need to add to the datagate's items cache
datagate.items_cache[rootitem.id] = [ threading.RLock(), rootitem ]
rootitem.save()

# the users parent
print 'Creating the users parent'
usersitem = datagate.create_item(parentid=rootitem.id)
usersitem.name = 'users'
usersitem.save()

# the superuser
print 'Creating the super user'
superitem = datagate.create_item(parentid=usersitem.id)
superitem.creatorid = superitem.id
superitem.username = sys.argv[1]
superitem.password = sys.argv[2]
superitem.name = 'Administrator'
superitem.email = ''
superitem.superuser = '1'
superitem.active = '1'
superitem.save()

# set the creator of the users item (now that we have a superuser)
usersitem.creatorid = superitem.id
usersitem.save()

# the meetings parent
print 'Creating the meetings parent'
meetingsitem = datagate.create_item(creatorid=superitem.id, parentid=rootitem.id)
meetingsitem.name = 'meetings'
meetingsitem.save()

# save the README file
print 'Generating the README.TXT file'
f = open(os.path.join(Constants.DATA_DIRECTORY, 'README.TXT'), 'w')
f.write('''
This file is automatically generated by the Installation procedure (Install.py).

This directory contains the items objects, saved using the anydbm module.  Items are
grouped by the last few characters and saved together in a file.

Program Information
+-----------------+
Installation Date: ''' + str(time.strftime('%a, %d %b %Y %H:%M:%S')) + '''
GroupMind Version: ''' + str(Constants.VERSION) + '''
Data File Format:  ''' + str(whichdb.whichdb(os.path.join(Constants.DATA_DIRECTORY, 'z.db'))) + ''' (chosen automatically by anydbm)

''')
f.close()

# Done
print 'The GroupMind tables have been successfully created.  Enjoy!'
